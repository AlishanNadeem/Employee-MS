[{"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\index.js":"1","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\App.js":"2","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Screens\\Error\\Error.js":"3","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Screens\\Home\\Home.js":"4","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Screens\\Admin\\Admin.js":"5","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Screens\\Employee\\Employee.js":"6","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Drawer\\EmployeeDrawer.js":"7","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Drawer\\AdminDrawer.js":"8","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\NavBar\\NavBar.js":"9","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Leave\\LeaveHistory.js":"10","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Leave\\ViewLeave.js":"11","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Project\\ProjectHistory.js":"12","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Project\\ViewPendingProjects.js":"13","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Project\\AddProject.js":"14","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Forms\\Login\\Login.js":"15","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Employee\\NonActiveEmployee.js":"16","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Employee\\ActiveEmployee.js":"17","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Profile\\Profile.js":"18","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Project\\PendingProject.js":"19","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Project\\ProjectTable.js":"20","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Leave\\Leaves.js":"21","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Profile\\Profile.js":"22","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Loader.js":"23","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Heading.js":"24","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Leave\\UpdateLeave.js":"25","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Leave\\AddLeave.js":"26","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Employee\\UpdateEmployee.js":"27","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Employee\\AddEmployee.js":"28","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Project\\AddProjectForm.js":"29"},{"size":275,"mtime":1749590098733,"results":"30","hashOfConfig":"31"},{"size":800,"mtime":1749590098669,"results":"32","hashOfConfig":"31"},{"size":91,"mtime":1749590098726,"results":"33","hashOfConfig":"31"},{"size":890,"mtime":1749590098730,"results":"34","hashOfConfig":"31"},{"size":3125,"mtime":1749590098721,"results":"35","hashOfConfig":"31"},{"size":2104,"mtime":1749590098725,"results":"36","hashOfConfig":"31"},{"size":5085,"mtime":1749590098698,"results":"37","hashOfConfig":"31"},{"size":8078,"mtime":1749590098695,"results":"38","hashOfConfig":"31"},{"size":1418,"mtime":1749590098718,"results":"39","hashOfConfig":"31"},{"size":5958,"mtime":1749590098682,"results":"40","hashOfConfig":"31"},{"size":8055,"mtime":1749590098683,"results":"41","hashOfConfig":"31"},{"size":5985,"mtime":1749590098692,"results":"42","hashOfConfig":"31"},{"size":5341,"mtime":1749590098694,"results":"43","hashOfConfig":"31"},{"size":6629,"mtime":1749590098690,"results":"44","hashOfConfig":"31"},{"size":4812,"mtime":1749590098713,"results":"45","hashOfConfig":"31"},{"size":5637,"mtime":1749590098678,"results":"46","hashOfConfig":"31"},{"size":11657,"mtime":1749590098675,"results":"47","hashOfConfig":"31"},{"size":7496,"mtime":1749590098685,"results":"48","hashOfConfig":"31"},{"size":5440,"mtime":1749590098706,"results":"49","hashOfConfig":"31"},{"size":5157,"mtime":1749590098709,"results":"50","hashOfConfig":"31"},{"size":13807,"mtime":1749590098702,"results":"51","hashOfConfig":"31"},{"size":7499,"mtime":1749590098706,"results":"52","hashOfConfig":"31"},{"size":586,"mtime":1749590098716,"results":"53","hashOfConfig":"31"},{"size":695,"mtime":1749590098714,"results":"54","hashOfConfig":"31"},{"size":5729,"mtime":1749590098703,"results":"55","hashOfConfig":"31"},{"size":5593,"mtime":1749590098700,"results":"56","hashOfConfig":"31"},{"size":9543,"mtime":1749590098680,"results":"57","hashOfConfig":"31"},{"size":9038,"mtime":1749590098677,"results":"58","hashOfConfig":"31"},{"size":3921,"mtime":1749590098691,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1klbk4e",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\index.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\App.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Screens\\Error\\Error.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Screens\\Home\\Home.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Screens\\Admin\\Admin.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Screens\\Employee\\Employee.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Drawer\\EmployeeDrawer.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Drawer\\AdminDrawer.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\NavBar\\NavBar.js",["130","131","132","133","134"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Route, Link, useRouteMatch, useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    backgroundColor: '#003049',\r\n    color: 'white',\r\n    height: '100%',\r\n    justifyContent: 'center'\r\n  }\r\n}));\r\n\r\nexport default function NavBar(props) {\r\n\r\n  const classes = useStyles();\r\n  const { url } = useRouteMatch();\r\n  const history = useHistory();\r\n\r\n  function Logout(){\r\n    localStorage.clear()\r\n    history.push('/')\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <b>{props.message}</b> Dashboard\r\n          </Typography>\r\n          <Button onClick={Logout} color=\"secondary\">\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Leave\\LeaveHistory.js",["135","136","137","138","139","140"],"import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Button,\r\n    Paper,\r\n    Snackbar,\r\n    Dialog,\r\n    Backdrop,\r\n    Grid\r\n} from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport Loader from '../../Loader';\r\nimport Heading from '../../Heading';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: '#003049',\r\n        color: theme.palette.common.white,\r\n        fontWeight: 'bold',\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n        backgroundColor: theme.palette.common.white,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    parentDiv: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    upperChild: {\r\n        display: 'flex',\r\n        flex: 0.1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    lowerChild: {\r\n        display: 'flex',\r\n        flex: 0.9,\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    statusColorRed: {\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorGreen: {\r\n        color: 'green',\r\n        fontWeight: 'bold',\r\n    }\r\n}));\r\n\r\nexport default function LeaveHistory() {\r\n    const classes = useStyles();\r\n\r\n    const [employees, setEmployees] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getLeaveHistory();\r\n    }, []);\r\n\r\n    const getLeaveHistory = () => {\r\n        Axios.get('http://localhost:5000/admin/viewLeaveHistory', {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                const getEmployees = res.data;\r\n                setEmployees(getEmployees);\r\n                setIsLoaded(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.parentDiv}>\r\n            <div className={classes.upperChild}>\r\n                <Heading text='Leave History' />\r\n            </div>\r\n            <div className={classes.lowerChild}>\r\n                <TableContainer component={Paper}>\r\n                    <Grid container justify=\"flex-end\">\r\n                    </Grid>\r\n                    {\r\n                        isLoaded === false ? (<Loader />) : (\r\n                            <Table aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell>Employee ID</StyledTableCell>\r\n                                        <StyledTableCell>Employee Name</StyledTableCell>\r\n                                        <StyledTableCell>Description</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Start Date</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">End Date</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Status</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                {employees.length > 0 ?\r\n                                    (<TableBody>\r\n                                        {\r\n                                            employees.map((employee) => (\r\n                                                employee.leaves.map((leave) => (\r\n                                                    <StyledTableRow key={employee._id}>\r\n                                                        <StyledTableCell>{employee.employeeId}</StyledTableCell>\r\n                                                        <StyledTableCell>{employee.name}</StyledTableCell>\r\n                                                        <StyledTableCell component=\"th\" scope=\"row\">{leave.description}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{leave.startDate}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{leave.endDate}</StyledTableCell>\r\n                                                        {\r\n                                                            leave.status === 'Approved' ?\r\n                                                                (<StyledTableCell align=\"center\" className={classes.statusColorGreen}>{leave.status}</StyledTableCell>)\r\n                                                                :\r\n                                                                (<StyledTableCell align=\"center\" className={classes.statusColorRed}>{leave.status}</StyledTableCell>)\r\n                                                        }\r\n                                                    </StyledTableRow>\r\n                                                ))\r\n                                            ))\r\n                                        }\r\n                                    </TableBody>) :\r\n                                    (<h2>No Leaves Found</h2>)\r\n                                }\r\n                            </Table>\r\n                        )\r\n                    }\r\n                </TableContainer>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Leave\\ViewLeave.js",["141","142","143"],"import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Button,\r\n    Paper,\r\n    Snackbar,\r\n    Dialog,\r\n    Backdrop,\r\n    Grid\r\n} from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport Loader from '../../Loader';\r\nimport Heading from '../../Heading';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: '#003049',\r\n        color: theme.palette.common.white,\r\n        fontWeight: 'bold',\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n        backgroundColor: theme.palette.common.white,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    parentDiv: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    upperChild: {\r\n        display: 'flex',\r\n        flex: 0.1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    lowerChild: {\r\n        display: 'flex',\r\n        flex: 0.9,\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    statusColorRed: {\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorGreen: {\r\n        color: 'green',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorYellow: {\r\n        color: '#003049',\r\n        fontWeight: 'bold',\r\n    },\r\n}));\r\n\r\nexport default function Leaves() {\r\n    const classes = useStyles();\r\n\r\n    const [employees, setEmployees] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getPendingLeaves();\r\n    }, []);\r\n\r\n    const getPendingLeaves = () => {\r\n        Axios.get('http://localhost:5000/admin/viewLeaveRequests', {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                const getEmployees = res.data;\r\n                setEmployees(getEmployees);\r\n                setIsLoaded(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const acceptLeave = (id, status) => {\r\n        Axios.post(`http://localhost:5000/admin/approveLeaveRequest/${id}`, {\r\n            status: status\r\n        },\r\n            {\r\n                headers: {\r\n                    'x-access-token': localStorage.getItem('x-access-token')\r\n                }\r\n            })\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                getPendingLeaves();\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleClickAccept = (e) => {\r\n        acceptLeave(e, \"Approved\");\r\n    };\r\n\r\n    const handleClickDeclined = (e) => {\r\n        acceptLeave(e, \"Declined\");\r\n    };\r\n\r\n    return (\r\n        <div className={classes.parentDiv}>\r\n            <div className={classes.upperChild}>\r\n                <Heading text='Pending Leaves' />\r\n            </div>\r\n            <div className={classes.lowerChild}>\r\n                <TableContainer component={Paper}>\r\n                    <Grid container justify=\"flex-end\">\r\n                    </Grid>\r\n                    {\r\n                        isLoaded === false ? (<Loader />) : (\r\n                            <Table aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell>Employee Id</StyledTableCell>\r\n                                        <StyledTableCell>Employee Name</StyledTableCell>\r\n                                        <StyledTableCell>Description</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Start Date</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">End Date</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Action</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                {employees.length > 0 ?\r\n                                    (<TableBody>\r\n                                        {\r\n                                            employees.map((employee) => (\r\n                                                employee.leaves.map((leave) => (\r\n                                                    <StyledTableRow key={employee._id}>\r\n                                                        <StyledTableCell>{employee.employeeId}</StyledTableCell>\r\n                                                        <StyledTableCell>{employee.name}</StyledTableCell>\r\n                                                        <StyledTableCell component=\"th\" scope=\"row\">{leave.description}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{leave.startDate}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{leave.endDate}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">\r\n                                                            <React.Fragment>\r\n                                                                <Button\r\n                                                                    variant=\"contained\"\r\n                                                                    color=\"primary\"\r\n                                                                    size=\"small\"\r\n                                                                    className={classes.button}\r\n                                                                    startIcon={<CheckCircleIcon />}\r\n                                                                    onClick={() => handleClickAccept(leave._id)}>\r\n                                                                    Accept\r\n                                                                </Button>\r\n                                                                <Button\r\n                                                                    variant=\"contained\"\r\n                                                                    color=\"secondary\"\r\n                                                                    size=\"small\"\r\n                                                                    className={classes.button}\r\n                                                                    startIcon={<CancelIcon />}\r\n                                                                    onClick={() => handleClickDeclined(leave._id)}>\r\n                                                                    Declined\r\n                                                                </Button>\r\n                                                            </React.Fragment>\r\n                                                        </StyledTableCell>\r\n                                                    </StyledTableRow>\r\n                                                ))\r\n                                            ))\r\n                                        }\r\n                                    </TableBody>) :\r\n                                    (<h2>No Leaves Found</h2>)\r\n                                }\r\n                            </Table>\r\n                        )\r\n                    }\r\n                </TableContainer>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Project\\ProjectHistory.js",["144","145","146","147","148","149"],"import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Button,\r\n    Paper,\r\n    Snackbar,\r\n    Dialog,\r\n    Backdrop,\r\n    Grid\r\n} from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport Loader from '../../Loader';\r\nimport Heading from '../../Heading';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: '#003049',\r\n        color: theme.palette.common.white,\r\n        fontWeight: 'bold',\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n        backgroundColor: theme.palette.common.white,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    parentDiv: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    upperChild: {\r\n        display: 'flex',\r\n        flex: 0.1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    lowerChild: {\r\n        display: 'flex',\r\n        flex: 0.9,\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    statusColorRed: {\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorGreen: {\r\n        color: 'green',\r\n        fontWeight: 'bold',\r\n    }\r\n}));\r\n\r\nexport default function ProjectHistory() {\r\n    const classes = useStyles();\r\n\r\n    const [employees, setEmployees] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getProjectHistory();\r\n    }, []);\r\n\r\n    const getProjectHistory = () => {\r\n        Axios.get('http://localhost:5000/admin/viewProjectHistory', {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                const getEmployees = res.data;\r\n                setEmployees(getEmployees);\r\n                setIsLoaded(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.parentDiv}>\r\n            <div className={classes.upperChild}>\r\n                <Heading text='Project History' />\r\n            </div>\r\n            <div className={classes.lowerChild}>\r\n                <TableContainer component={Paper}>\r\n                    <Grid container justify=\"flex-end\">\r\n                    </Grid>\r\n                    {\r\n                        isLoaded === false ? (<Loader />) : (\r\n                            <Table aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell>Employee ID</StyledTableCell>\r\n                                        <StyledTableCell>Employee Name</StyledTableCell>\r\n                                        <StyledTableCell>Description</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Start Date</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">End Date</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Status</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                {employees.length > 0 ?\r\n                                    (<TableBody>\r\n                                        {\r\n                                            employees.map((employee) => (\r\n                                                employee.projects.map((project) => (\r\n                                                    <StyledTableRow key={employee._id}>\r\n                                                        <StyledTableCell>{employee.employeeId}</StyledTableCell>\r\n                                                        <StyledTableCell>{employee.name}</StyledTableCell>\r\n                                                        <StyledTableCell component=\"th\" scope=\"row\">{project.description}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{project.startDate}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{project.endDate}</StyledTableCell>\r\n                                                        {\r\n                                                            project.status === 'Completed' ?\r\n                                                                (<StyledTableCell align=\"center\" className={classes.statusColorGreen}>{project.status}</StyledTableCell>)\r\n                                                                :\r\n                                                                (<StyledTableCell align=\"center\" className={classes.statusColorRed}>{project.status}</StyledTableCell>)\r\n                                                        }\r\n                                                    </StyledTableRow>\r\n                                                ))\r\n                                            ))\r\n                                        }\r\n                                    </TableBody>) :\r\n                                    (<h2>No Leaves Found</h2>)\r\n                                }\r\n                            </Table>\r\n                        )\r\n                    }\r\n                </TableContainer>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Project\\ViewPendingProjects.js",["150","151","152","153","154","155"],"import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Button,\r\n    Paper,\r\n    Snackbar,\r\n    Dialog,\r\n    Backdrop,\r\n    Grid\r\n} from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport Loader from '../../Loader';\r\nimport Heading from '../../Heading';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: '#003049',\r\n        color: theme.palette.common.white,\r\n        fontWeight: 'bold',\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n        backgroundColor: theme.palette.common.white,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    parentDiv: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    upperChild: {\r\n        display: 'flex',\r\n        flex: 0.1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    lowerChild: {\r\n        display: 'flex',\r\n        flex: 0.9,\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    statusColorRed: {\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorGreen: {\r\n        color: 'green',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorYellow: {\r\n        color: '#003049',\r\n        fontWeight: 'bold',\r\n    },\r\n}));\r\n\r\nexport default function ViewPendingProjects() {\r\n    const classes = useStyles();\r\n\r\n    const [employees, setEmployees] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getPendingProjects();\r\n    }, []);\r\n\r\n    const getPendingProjects = () => {\r\n        Axios.get('http://localhost:5000/admin/viewProjects', {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                const getEmployees = res.data;\r\n                setEmployees(getEmployees);\r\n                setIsLoaded(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.parentDiv}>\r\n            <div className={classes.upperChild}>\r\n                <Heading text='Pending Projects' />\r\n            </div>\r\n            <div className={classes.lowerChild}>\r\n                <TableContainer component={Paper}>\r\n                    <Grid container justify=\"flex-end\">\r\n                    </Grid>\r\n                    {\r\n                        isLoaded === false ? (<Loader />) : (\r\n                            <Table aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell>Employee Id</StyledTableCell>\r\n                                        <StyledTableCell>Employee Name</StyledTableCell>\r\n                                        <StyledTableCell>Designation</StyledTableCell>\r\n                                        <StyledTableCell>Description</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Start Date</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                {employees.length > 0 ?\r\n                                    (<TableBody>\r\n                                        {\r\n                                            employees.map((employee) => (\r\n                                                employee.projects.map((project) => (\r\n                                                    <StyledTableRow key={employee._id}>\r\n                                                        <StyledTableCell component=\"th\" scope=\"row\">{employee.employeeId}</StyledTableCell>\r\n                                                        <StyledTableCell>{employee.name}</StyledTableCell>\r\n                                                        <StyledTableCell>{employee.designation}</StyledTableCell>\r\n                                                        <StyledTableCell>{project.description}</StyledTableCell>\r\n                                                        <StyledTableCell align=\"center\">{project.startDate}</StyledTableCell>\r\n                                                    </StyledTableRow>\r\n                                                ))\r\n                                            ))\r\n                                        }\r\n                                    </TableBody>) :\r\n                                    (<h2>No Projects Found</h2>)\r\n                                }\r\n                            </Table>\r\n                        )\r\n                    }\r\n                </TableContainer>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Project\\AddProject.js",["156","157","158","159"],"import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Button,\r\n    Paper,\r\n    Snackbar,\r\n    Dialog,\r\n    Backdrop,\r\n    Grid\r\n} from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport Loader from '../../Loader';\r\nimport Heading from '../../Heading';\r\nimport AddProjectForm from './AddProjectForm';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: '#003049',\r\n        color: theme.palette.common.white,\r\n        fontWeight: 'bold',\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n        backgroundColor: theme.palette.common.white,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    parentDiv: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    upperChild: {\r\n        display: 'flex',\r\n        flex: 0.1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    lowerChild: {\r\n        display: 'flex',\r\n        flex: 0.9,\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    statusColorRed: {\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorGreen: {\r\n        color: 'green',\r\n        fontWeight: 'bold',\r\n    }\r\n}));\r\n\r\nexport default function AddProject() {\r\n    const classes = useStyles();\r\n\r\n    const [employees, setEmployees] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [onClickAssign, setOnClickAssign] = useState(false);\r\n    const [selectedEmployee, setSelectedEmployee] = useState({});\r\n\r\n    useEffect(() => {\r\n        getActiveEmployees();\r\n    }, []);\r\n\r\n    const getActiveEmployees = () => {\r\n        Axios.get('http://localhost:5000/admin/employees', {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                const getEmployees = res.data;\r\n                setEmployees(getEmployees);\r\n                setIsLoaded(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const viewEmployee = (id) => {\r\n        Axios.get(`http://localhost:5000/admin/employees/${id}`, {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                setSelectedEmployee({\r\n                    id: res.data._id,\r\n                    name: res.data.name,\r\n                });\r\n                console.log(selectedEmployee);\r\n                setOnClickAssign(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleClickAssign = (e) => {\r\n        viewEmployee(e);\r\n    };\r\n    const handleClose = (data) => {\r\n        setOnClickAssign(data);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.parentDiv}>\r\n            {\r\n                onClickAssign === true ?\r\n                    <Dialog open={onClickAssign} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <AddProjectForm employee={selectedEmployee} dialogClose={handleClose} />\r\n                    </Dialog> : null\r\n            }\r\n            <div className={classes.upperChild}>\r\n                <Heading text='Assign a Project' />\r\n            </div>\r\n            <div className={classes.lowerChild}>\r\n                <TableContainer component={Paper}>\r\n                    <Grid container justify=\"flex-end\">\r\n                    </Grid>\r\n                    {\r\n                        isLoaded === false ? (<Loader />) : (\r\n                            <Table aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell>Employee ID</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Employee Name</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Action</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                {employees.length > 0 ?\r\n                                    (<TableBody>\r\n                                        {\r\n                                            employees.map((employee) => (\r\n                                                <StyledTableRow key={employee._id}>\r\n                                                    <StyledTableCell component=\"th\" scope=\"row\">{employee.employeeId}</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">{employee.name}</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            color=\"primary\"\r\n                                                            size=\"small\"\r\n                                                            className={classes.button}\r\n                                                            onClick={() => handleClickAssign(employee._id, employee.name)}>\r\n                                                            Assign\r\n                                                        </Button>\r\n                                                    </StyledTableCell>\r\n                                                </StyledTableRow>\r\n                                            ))\r\n                                        }\r\n                                    </TableBody>) :\r\n                                    (<h2>No Leaves Found</h2>)\r\n                                }\r\n                            </Table>\r\n                        )\r\n                    }\r\n                </TableContainer>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Forms\\Login\\Login.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Employee\\NonActiveEmployee.js",["160","161","162","163","164","165"],"import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Button,\r\n    Paper,\r\n    Snackbar,\r\n    Dialog,\r\n    Backdrop,\r\n    Grid\r\n} from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport Loader from '../../Loader';\r\nimport Heading from '../../Heading';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: '#003049',\r\n        color: theme.palette.common.white,\r\n        fontWeight: 'bold',\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n        backgroundColor: theme.palette.common.white,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    parentDiv: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    upperChild: {\r\n        display: 'flex',\r\n        flex: 0.1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    lowerChild: {\r\n        display: 'flex',\r\n        flex: 0.9,\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    statusColorRed: {\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorGreen: {\r\n        color: 'green',\r\n        fontWeight: 'bold',\r\n    }\r\n}));\r\n\r\nexport default function NonActiveEmployee() {\r\n    const classes = useStyles();\r\n\r\n    const [employees, setEmployees] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getNonActiveEmployee();\r\n    }, []);\r\n\r\n    const getNonActiveEmployee = () => {\r\n        Axios.get('http://localhost:5000/admin/nonActiveEmployees', {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                const getEmployees = res.data;\r\n                setEmployees(getEmployees);\r\n                setIsLoaded(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.parentDiv}>\r\n            <div className={classes.upperChild}>\r\n                <Heading text='Non Active Employees' />\r\n            </div>\r\n            <div className={classes.lowerChild}>\r\n                <TableContainer component={Paper}>\r\n                    <Grid container justify=\"flex-end\">\r\n                    </Grid>\r\n                    {\r\n                        isLoaded === false ? (<Loader />) : (\r\n                            <Table aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell>Employee ID</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Employee Name</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Designation</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Email</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Contact #</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Joining Date</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Leaving Date</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                {employees.length > 0 ?\r\n                                    (<TableBody>\r\n                                        {\r\n                                            employees.map((employee) => (\r\n                                                <StyledTableRow key={employee._id}>\r\n                                                    <StyledTableCell component=\"th\" scope=\"row\">{employee.employeeId}</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">{employee.name}</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">{employee.designation}</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">{employee.email}</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">0{employee.contactNumber}</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">{employee.hireDate}</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">{employee.leavingDate}</StyledTableCell>\r\n                                                </StyledTableRow>\r\n                                            ))\r\n                                        }\r\n                                    </TableBody>) :\r\n                                    (<h2>No Employee Found</h2>)\r\n                                }\r\n                            </Table>\r\n                        )\r\n                    }\r\n                </TableContainer>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Employee\\ActiveEmployee.js",["166","167"],"import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Button,\r\n    Paper,\r\n    Snackbar,\r\n    Dialog,\r\n    Backdrop,\r\n    Grid\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Loader from '../../Loader';\r\nimport Heading from '../../Heading';\r\nimport AddEmployee from './AddEmployee';\r\nimport UpdateEmployee from './UpdateEmployee';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: '#003049',\r\n        color: theme.palette.common.white,\r\n        fontWeight: 'bold',\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n        backgroundColor: theme.palette.common.white,\r\n        maxWidth: '80px',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    parentDiv: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    upperChild: {\r\n        display: 'flex',\r\n        flex: 0.1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    lowerChild: {\r\n        display: 'flex',\r\n        flex: 0.9,\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    statusColorRed: {\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorGreen: {\r\n        color: 'green',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorBlue: {\r\n        color: '#003049',\r\n        fontWeight: 'bold',\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport default function ActiveEmployee() {\r\n    const classes = useStyles();\r\n\r\n    const [isDeleted, setIsDeleted] = React.useState(false);\r\n    const [activeEmployee, setActiveEmployee] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [isLoadedUpdate, setIsLoadedUpdate] = useState(false);\r\n    const [onClickAdd, setOnClickAdd] = React.useState(false);\r\n    const [onClickUpdate, setOnClickUpdate] = React.useState(false);\r\n    const [selectedEmployee, setSelectedEmployee] = React.useState({});\r\n    const [description, setDescription] = React.useState({});\r\n\r\n    const handleSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setIsDeleted(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getActiveEmployees();\r\n    }, []);\r\n\r\n    const getActiveEmployees = () => {\r\n        Axios.get('http://localhost:5000/admin/employees', {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                const getActiveEmployees = res.data;\r\n                setActiveEmployee(getActiveEmployees);\r\n                setIsLoaded(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const deleteEmployee = (id) => {\r\n        Axios.post(`http://localhost:5000/admin/deleteEmployee/${id}`, null, {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                setIsDeleted(true);\r\n                console.log(res.data);\r\n                getActiveEmployees();\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const viewEmployee = (id) => {\r\n        Axios.get(`http://localhost:5000/admin/employees/${id}`, {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                setSelectedEmployee({\r\n                    id: res.data._id,\r\n                    name: res.data.name,\r\n                    contactNumber: res.data.contactNumber,\r\n                    email: res.data.email,\r\n                    dateOfBirth: res.data.dateOfBirth,\r\n                    age: res.data.age,\r\n                    gender: res.data.gender,\r\n                    address: res.data.address,\r\n                    designation: res.data.designation,\r\n                });\r\n                console.log(selectedEmployee);\r\n                setOnClickUpdate(true);\r\n                setIsLoadedUpdate(false);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleClickAdd = () => {\r\n        setOnClickAdd(true);\r\n    };\r\n\r\n    const handleClickUpdate = (e) => {\r\n        setIsLoadedUpdate(true);\r\n        viewEmployee(e);\r\n    };\r\n\r\n    const handleClose = (data) => {\r\n        setOnClickAdd(data);\r\n        setOnClickUpdate(data);\r\n        getActiveEmployees();\r\n    };\r\n\r\n    return (\r\n        <div className={classes.parentDiv}>\r\n            <Backdrop className={classes.backdrop} open={isLoadedUpdate}>\r\n                <Loader />\r\n            </Backdrop>\r\n            <Snackbar anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n                open={isDeleted} autoHideDuration={3000} onClose={handleSnackbarClose}>\r\n                <Alert onClose={handleSnackbarClose} severity=\"error\">\r\n                    Employee Deleted Successfully\r\n                </Alert>\r\n            </Snackbar>\r\n            {\r\n                onClickAdd === true ?\r\n                    <Dialog open={onClickAdd} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <AddEmployee dialogClose={handleClose} />\r\n                    </Dialog> : null\r\n            }\r\n            {\r\n                onClickUpdate === true ?\r\n                    <Dialog open={onClickUpdate} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <UpdateEmployee dialogClose={handleClose} selectedEmployee={selectedEmployee} />\r\n                    </Dialog> : null\r\n            }\r\n            <div className={classes.upperChild}>\r\n                <Heading text='Employees Detail' />\r\n            </div>\r\n            <div className={classes.lowerChild}>\r\n                <TableContainer component={Paper}>\r\n                    <Grid container justify=\"flex-end\">\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size=\"medium\"\r\n                            className={classes.button}\r\n                            startIcon={<AddCircleIcon />}\r\n                            onClick={handleClickAdd}>\r\n                            Add New\r\n                        </Button>\r\n                    </Grid>\r\n                    {\r\n                        isLoaded === false ? (<Loader />) : (\r\n                            <Table aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell align=\"center\">Employee ID</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Employee Name</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Designation</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Email</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Contact #</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Gender</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Joining Date</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Actions</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                {activeEmployee.length > 0 ?\r\n                                    (<TableBody>\r\n                                        {activeEmployee.map((employee) => (\r\n                                            <StyledTableRow key={employee._id}>\r\n                                                <StyledTableCell align=\"center\" component=\"th\" scope=\"row\">{employee.employeeId}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{employee.name}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{employee.designation}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{employee.email}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">0{employee.contactNumber}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{employee.gender}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{employee.hireDate}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <React.Fragment>\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            color=\"primary\"\r\n                                                            size=\"small\"\r\n                                                            className={classes.button}\r\n                                                            startIcon={<CloudUploadIcon />}\r\n                                                            onClick={() => handleClickUpdate(employee._id)}>\r\n                                                            Update\r\n\r\n                                                        </Button>\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            color=\"secondary\"\r\n                                                            size=\"small\"\r\n                                                            className={classes.button}\r\n                                                            startIcon={<DeleteIcon />}\r\n                                                            onClick={() => deleteEmployee(employee._id)}>\r\n                                                            Delete\r\n                                                        </Button>\r\n                                                    </React.Fragment>\r\n                                                </StyledTableCell>\r\n                                            </StyledTableRow>\r\n                                        ))}\r\n                                    </TableBody>) :\r\n                                    (<h2>No Active Employee Found</h2>)\r\n                                }\r\n                            </Table>\r\n                        )\r\n                    }\r\n                </TableContainer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Profile\\Profile.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Project\\PendingProject.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Project\\ProjectTable.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Leave\\Leaves.js",["168","169"],"import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Button,\r\n    Paper,\r\n    Snackbar,\r\n    Dialog,\r\n    Backdrop,\r\n    Grid\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Loader from '../../Loader';\r\nimport Heading from '../../Heading';\r\nimport AddLeave from './AddLeave';\r\nimport UpdateLeave from './UpdateLeave';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: '#003049',\r\n        color: theme.palette.common.white,\r\n        fontWeight: 'bold',\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n        backgroundColor: theme.palette.common.white\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    parentDiv: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    upperChild: {\r\n        display: 'flex',\r\n        flex: 0.1,\r\n        width: '100%',\r\n        flexDirection: 'column',\r\n    },\r\n    lowerChild: {\r\n        display: 'flex',\r\n        flex: 0.9,\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    statusColorRed: {\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorGreen: {\r\n        color: 'green',\r\n        fontWeight: 'bold',\r\n    },\r\n    statusColorBlue: {\r\n        color: '#003049',\r\n        fontWeight: 'bold',\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport default function Leaves() {\r\n    const classes = useStyles();\r\n\r\n    const [isDeleted, setIsDeleted] = React.useState(false);\r\n    const [leaves, setLeaves] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [isLoadedUpdate, setIsLoadedUpdate] = useState(false);\r\n    const [onClickAdd, setOnClickAdd] = React.useState(false);\r\n    const [onClickUpdate, setOnClickUpdate] = React.useState(false);\r\n    const [selectedLeave, setSelectedLeave] = React.useState({});\r\n    const [description, setDescription] = React.useState({});\r\n\r\n    const handleSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setIsDeleted(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getLeaves();\r\n    }, []);\r\n\r\n    const getLeaves = () => {\r\n        Axios.get('http://localhost:5000/employee/viewLeaves', {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                const getLeaves = res.data;\r\n                setLeaves(getLeaves);\r\n                setIsLoaded(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const deleteLeave = (id) => {\r\n        Axios.post(`http://localhost:5000/employee/deleteLeaveRequest/${id}`, null, {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                setIsDeleted(true);\r\n                console.log(res.data);\r\n                getLeaves();\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const viewLeave = (id) => {\r\n        Axios.get(`http://localhost:5000/employee/viewLeaveRequest/${id}`, {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                setSelectedLeave({\r\n                    id: res.data._id,\r\n                    startDate: res.data.startDate,\r\n                    endDate: res.data.endDate,\r\n                    description: res.data.description,\r\n                });\r\n                console.log(selectedLeave);\r\n                setOnClickUpdate(true);\r\n                setIsLoadedUpdate(false);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleClickAdd = () => {\r\n        setOnClickAdd(true);\r\n    };\r\n\r\n    const handleClickUpdate = (e) => {\r\n        setIsLoadedUpdate(true);\r\n        viewLeave(e);\r\n    };\r\n\r\n    const handleClose = (data) => {\r\n        setOnClickAdd(data);\r\n        setOnClickUpdate(data);\r\n        getLeaves();\r\n    };\r\n\r\n    return (\r\n        <div className={classes.parentDiv}>\r\n            <Backdrop className={classes.backdrop} open={isLoadedUpdate}>\r\n                <Loader />\r\n            </Backdrop>\r\n            <Snackbar anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n                open={isDeleted} autoHideDuration={3000} onClose={handleSnackbarClose}>\r\n                <Alert onClose={handleSnackbarClose} severity=\"error\">\r\n                    Leave Deleted Successfully\r\n                </Alert>\r\n            </Snackbar>\r\n            {\r\n                onClickAdd === true ?\r\n                    <Dialog open={onClickAdd} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <AddLeave dialogClose={handleClose} />\r\n                    </Dialog> : null\r\n            }\r\n            {\r\n                onClickUpdate === true ?\r\n                    <Dialog open={onClickUpdate} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <UpdateLeave dialogClose={handleClose} selectedLeave={selectedLeave} />\r\n                    </Dialog> : null\r\n            }\r\n            <div className={classes.upperChild}>\r\n                <Heading text='LEAVES' />\r\n            </div>\r\n            <div className={classes.lowerChild}>\r\n                <TableContainer component={Paper}>\r\n                    <Grid container justify=\"flex-end\">\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size=\"medium\"\r\n                            className={classes.button}\r\n                            startIcon={<AddCircleIcon />}\r\n                            onClick={handleClickAdd}>\r\n                            Add New\r\n                        </Button>\r\n                    </Grid>\r\n                    {\r\n                        isLoaded === false ? (<Loader />) : (\r\n                            <Table aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell>Leave Description</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Start Date</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">End Date</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Status</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Action</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                {leaves.length > 0 ?\r\n                                    (<TableBody>\r\n                                        {leaves.map((leave) => (\r\n                                            <StyledTableRow key={leave.description}>\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">\r\n                                                    {leave.description}\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{leave.startDate}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{leave.endDate}</StyledTableCell>\r\n                                                {\r\n                                                    leave.status === 'Pending' ?\r\n                                                        (<StyledTableCell align=\"center\" className={classes.statusColorBlue}>{leave.status}</StyledTableCell>)\r\n                                                        :\r\n                                                        [\r\n                                                            leave.status === 'Approved' ?\r\n                                                                (<StyledTableCell align=\"center\" className={classes.statusColorGreen}>{leave.status}</StyledTableCell>)\r\n                                                                :\r\n                                                                [\r\n                                                                    <StyledTableCell align=\"center\" className={classes.statusColorRed}>{leave.status}</StyledTableCell>\r\n                                                                ]\r\n                                                        ]\r\n                                                }\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    {\r\n                                                        leave.status === 'Pending' ?\r\n                                                            (\r\n                                                                <React.Fragment>\r\n                                                                    <Button\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"primary\"\r\n                                                                        size=\"small\"\r\n                                                                        className={classes.button}\r\n                                                                        startIcon={<CloudUploadIcon />}\r\n                                                                        onClick={() => handleClickUpdate(leave._id)}>\r\n                                                                        Update\r\n\r\n                                                                    </Button>\r\n                                                                    <Button\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"secondary\"\r\n                                                                        size=\"small\"\r\n                                                                        className={classes.button}\r\n                                                                        startIcon={<DeleteIcon />}\r\n                                                                        onClick={() => deleteLeave(leave._id)}>\r\n                                                                        Delete\r\n                                                                    </Button>\r\n                                                                </React.Fragment>\r\n                                                            )\r\n                                                            :\r\n                                                            (\r\n                                                                <React.Fragment>\r\n                                                                    <Button\r\n                                                                        disabled\r\n                                                                        size=\"small\"\r\n                                                                        className={classes.button}\r\n                                                                        startIcon={<CloudUploadIcon />}>\r\n                                                                        Update\r\n                                                                    </Button>\r\n                                                                    <Button\r\n                                                                        disabled\r\n                                                                        size=\"small\"\r\n                                                                        className={classes.button}\r\n                                                                        startIcon={<DeleteIcon />}>\r\n                                                                        Delete\r\n                                                                    </Button>\r\n                                                                </React.Fragment>\r\n                                                            )\r\n                                                    }\r\n                                                </StyledTableCell>\r\n                                            </StyledTableRow>\r\n                                        ))}\r\n                                    </TableBody>) :\r\n                                    (<h2>No Leaves Found</h2>)\r\n                                }\r\n                            </Table>\r\n                        )\r\n                    }\r\n                </TableContainer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Profile\\Profile.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Loader.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Heading.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Leave\\UpdateLeave.js",["170"],"import 'date-fns';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n    Divider,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { DialogActions, DialogContent } from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n        margin: theme.spacing.unit * 2,\r\n    },\r\n    padding: {\r\n        padding: theme.spacing.unit\r\n    },\r\n    baseColor: {\r\n        backgroundColor: '#003049',\r\n    },\r\n    color: {\r\n        color: '#003049',\r\n    },\r\n}));\r\n\r\nexport default function UpdateLeave(props) {\r\n    const classes = useStyles();\r\n\r\n    const [selectedStartDate, setSelectedStartDate] = useState(new Date());\r\n    const [selectedEndDate, setSelectedEndDate] = useState(new Date());\r\n    const [description, setDescription] = useState(\"\");\r\n\r\n        useEffect(() => {\r\n            setSelectedStartDate(props.selectedLeave.startDate);\r\n            setSelectedEndDate(props.selectedLeave.endDate);\r\n            setDescription(props.selectedLeave.description);\r\n        }, []);\r\n\r\n    const updateLeave = () => {\r\n\r\n        const data = {\r\n            startDate: selectedStartDate,\r\n            endDate: selectedEndDate,\r\n            description: description,\r\n        }\r\n        console.log(data);\r\n\r\n        Axios.post(`http://localhost:5000/employee/updateLeaveRequest/${props.selectedLeave.id}`, data, {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n                handleClose();\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleStartDateChange = (startDate) => {\r\n        setSelectedStartDate(startDate);\r\n    };\r\n\r\n    const handleEndDateChange = (endDate) => {\r\n        setSelectedEndDate(endDate);\r\n    };\r\n\r\n    const handleDescriptionChange = (e) => {\r\n        setDescription(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        updateLeave();\r\n    }\r\n\r\n    const handleClose = () => {\r\n        props.dialogClose(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <DialogContent>\r\n                <div className={classes.margin}>\r\n                    <Grid container justify=\"center\">\r\n                        <Typography variant=\"h4\" className={classes.color} gutterBottom>\r\n                            Update Leave\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Divider />\r\n                    <Grid container spacing={3} style={{ marginTop: '20px' }}>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <Grid item md={true} sm={true} xs={true}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    variant=\"inline\"\r\n                                    format=\"dd/MM/yyyy\"\r\n                                    margin=\"normal\"\r\n                                    label=\"Start Date\"\r\n                                    value={selectedStartDate}\r\n                                    onChange={handleStartDateChange}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={true} sm={true} xs={true}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    variant=\"inline\"\r\n                                    format=\"dd/MM/yyyy\"\r\n                                    margin=\"normal\"\r\n                                    label=\"End Date\"\r\n                                    value={selectedEndDate}\r\n                                    onChange={handleEndDateChange}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                        </MuiPickersUtilsProvider>\r\n                    </Grid>\r\n                    <Grid container justify=\"center\" style={{ marginTop: '30px' }}>\r\n                        <TextField\r\n                            id=\"outlined-multiline-static\"\r\n                            label=\"Description\"\r\n                            multiline\r\n                            rows={4}\r\n                            value={description}\r\n                            onChange={handleDescriptionChange}\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button color=\"primary\" onClick={handleClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"medium\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Employee\\Leave\\AddLeave.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Employee\\UpdateEmployee.js",["171"],"import 'date-fns';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n    Divider,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { DialogActions, DialogContent } from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n        margin: theme.spacing.unit * 2,\r\n    },\r\n    padding: {\r\n        padding: theme.spacing.unit\r\n    },\r\n    baseColor: {\r\n        backgroundColor: '#003049',\r\n    },\r\n    color: {\r\n        color: '#003049',\r\n    },\r\n}));\r\n\r\nexport default function UpdateEmployee(props) {\r\n    const classes = useStyles();\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [contact, setContact] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [dateOfBirth, setDateOfBirth] = useState(new Date());\r\n    const [age, setAge] = useState(\"\");\r\n    const [gender, setGender] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [designation, setDesignation] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setName(props.selectedEmployee.name);\r\n        setContact(props.selectedEmployee.contactNumber);\r\n        setEmail(props.selectedEmployee.email);\r\n        setDateOfBirth(props.selectedEmployee.dateOfBirth);\r\n        setAge(props.selectedEmployee.age);\r\n        setGender(props.selectedEmployee.gender);\r\n        setAddress(props.selectedEmployee.address);\r\n        setDesignation(props.selectedEmployee.designation);\r\n    }, []);\r\n\r\n    const updateEmployee = () => {\r\n\r\n        const data = {\r\n            name: name,\r\n            contactNumber: contact,\r\n            email: email,\r\n            dateOfBirth: dateOfBirth,\r\n            age: age,\r\n            gender: gender,\r\n            address: address,\r\n            designation: designation,\r\n        }\r\n        console.log(data);\r\n\r\n        Axios.post(`http://localhost:5000/admin/updateEmployee/${props.selectedEmployee.id}`, data, {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n                handleClose();\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const handleNameChange = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n\r\n    const handleContactChange = (e) => {\r\n        setContact(e.target.value);\r\n    };\r\n\r\n    const handleEmailChange = (e) => {\r\n        setEmail(e.target.value);\r\n    };\r\n\r\n    const handleDateOfBirthChange = (DOB) => {\r\n        setDateOfBirth(DOB);\r\n    };\r\n\r\n    const handleAgeChange = (e) => {\r\n        setAge(e.target.value);\r\n    };\r\n    const handleGenderChange = (e) => {\r\n        setGender(e.target.value);\r\n    };\r\n\r\n    const handleAddressChange = (e) => {\r\n        setAddress(e.target.value);\r\n    };\r\n\r\n    const handleDesignationChange = (e) => {\r\n        setDesignation(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        updateEmployee();\r\n    }\r\n\r\n    const handleClose = () => {\r\n        props.dialogClose(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <DialogContent>\r\n                <div className={classes.margin}>\r\n                    <Grid container justify=\"center\">\r\n                        <Typography variant=\"h4\" className={classes.color} gutterBottom>\r\n                            Update Employee\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Divider />\r\n                    <Grid container spacing={3} justify=\"center\" style={{ marginTop: '30px' }}>\r\n                        <Grid item md={true} sm={true} xs={true}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                id=\"outlined-required\"\r\n                                label=\"Name\"\r\n                                value={name}\r\n                                onChange={handleNameChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={true} sm={true} xs={true}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                id=\"outlined-required\"\r\n                                label=\"Contact #\"\r\n                                value={contact}\r\n                                onChange={handleContactChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={true} sm={true} xs={true}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                id=\"outlined-required\"\r\n                                label=\"Email\"\r\n                                value={email}\r\n                                onChange={handleEmailChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={3} style={{ marginTop: '20px' }}>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <Grid item md={6} sm={6} xs={6}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    variant=\"inline\"\r\n                                    format=\"dd/MM/yyyy\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"Date Of Birth\"\r\n                                    value={dateOfBirth}\r\n                                    onChange={handleDateOfBirthChange}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                        </MuiPickersUtilsProvider>\r\n                        <Grid item md={2} sm={2} xs={2}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                id=\"outlined-required\"\r\n                                label=\"Age\"\r\n                                value={age}\r\n                                onChange={handleAgeChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={4} sm={4} xs={4}>\r\n                            <InputLabel id=\"gender\">Gender</InputLabel>\r\n                            <Select\r\n                                fullWidth\r\n                                labelId=\"gender\"\r\n                                value={gender}\r\n                                onChange={handleGenderChange}\r\n                            >\r\n                                <MenuItem value=\"Male\">Male</MenuItem>\r\n                                <MenuItem value=\"Female\">Female</MenuItem>\r\n                            </Select>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container justify=\"center\" style={{ marginTop: '30px' }}>\r\n                        <TextField\r\n                            id=\"outlined-multiline-static\"\r\n                            label=\"Address\"\r\n                            value={address}\r\n                            onChange={handleAddressChange}\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid container style={{ marginTop: '30px' }}>\r\n                        <InputLabel id=\"designation\">Desgination</InputLabel>\r\n                        <Select\r\n                            fullWidth\r\n                            labelId=\"designation\"\r\n                            value={designation}\r\n                            onChange={handleDesignationChange}\r\n                        >\r\n                            <MenuItem value=\"Team Lead\">Team Lead</MenuItem>\r\n                            <MenuItem value=\"Sr. Developer\">Sr. Developer</MenuItem>\r\n                            <MenuItem value=\"Jr. Developer\">Jr. Developer</MenuItem>\r\n                            <MenuItem value=\"SQA\">SQA</MenuItem>\r\n                            <MenuItem value=\"Receptionist\">Receptionist</MenuItem>\r\n                            <MenuItem value=\"Intern\">Intern</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button color=\"primary\" onClick={handleClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"medium\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Employee\\AddEmployee.js",[],"C:\\Users\\wt\\Desktop\\Employee-MS\\client\\src\\Components\\Assets\\Admin\\Project\\AddProjectForm.js",["172"],"import 'date-fns';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n    Divider,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport { DialogActions, DialogContent } from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport Axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n        margin: theme.spacing.unit * 2,\r\n    },\r\n    padding: {\r\n        padding: theme.spacing.unit\r\n    },\r\n    baseColor: {\r\n        backgroundColor: '#003049',\r\n    },\r\n    color: {\r\n        color: '#003049',\r\n    },\r\n}));\r\n\r\nexport default function AddProjectForm(props) {\r\n    const classes = useStyles();\r\n\r\n    const [employeeId, setEmployeeId] = useState(\"\");\r\n    const [employeeName, setEmployeeName] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setEmployeeId(props.employee.id);\r\n        setEmployeeName(props.employee.name);\r\n    }, []);\r\n\r\n    const handleDescriptionChange = (e) => {\r\n        setDescription(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        addProject();\r\n    }\r\n\r\n    const handleClose = () => {\r\n        props.dialogClose(false);\r\n    }\r\n\r\n    const addProject = () => {\r\n        const data = {\r\n            description: description,\r\n        }\r\n        console.log(data);\r\n\r\n        Axios.post(`http://localhost:5000/admin/addProject/${employeeId}`, data, {\r\n            headers: {\r\n                'x-access-token': localStorage.getItem('x-access-token')\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n                props.dialogClose(false);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <DialogContent>\r\n                <div className={classes.margin}>\r\n                    <Grid container justify=\"center\">\r\n                        <Typography variant=\"h4\" className={classes.color} gutterBottom>\r\n                            Assign New Project\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Divider />\r\n                    <Grid container spacing={3} style={{ marginTop: '20px' }}>\r\n                        <Grid item md={true} sm={true} xs={true}>\r\n                            <TextField\r\n                                label=\"Employee Name\"\r\n                                value={employeeName}\r\n                                InputProps={{\r\n                                    readOnly: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container justify=\"center\" style={{ marginTop: '30px' }}>\r\n                        <TextField\r\n                            id=\"outlined-multiline-static\"\r\n                            label=\"Description\"\r\n                            multiline\r\n                            rows={4}\r\n                            value={description}\r\n                            onChange={handleDescriptionChange}\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button color=\"primary\" onClick={handleClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"medium\"\r\n                    className={classes.button}\r\n                    startIcon={<SendIcon />}\r\n                    onClick={handleSubmit}>\r\n                    Submit\r\n                </Button>\r\n            </DialogActions>\r\n        </React.Fragment>\r\n    );\r\n}\r\n",{"ruleId":"173","severity":1,"message":"174","line":7,"column":8,"nodeType":"175","messageId":"176","endLine":7,"endColumn":18},{"ruleId":"173","severity":1,"message":"177","line":8,"column":8,"nodeType":"175","messageId":"176","endLine":8,"endColumn":16},{"ruleId":"173","severity":1,"message":"178","line":9,"column":10,"nodeType":"175","messageId":"176","endLine":9,"endColumn":15},{"ruleId":"173","severity":1,"message":"179","line":9,"column":17,"nodeType":"175","messageId":"176","endLine":9,"endColumn":21},{"ruleId":"173","severity":1,"message":"180","line":32,"column":11,"nodeType":"175","messageId":"176","endLine":32,"endColumn":14},{"ruleId":"173","severity":1,"message":"181","line":11,"column":5,"nodeType":"175","messageId":"176","endLine":11,"endColumn":11},{"ruleId":"173","severity":1,"message":"182","line":13,"column":5,"nodeType":"175","messageId":"176","endLine":13,"endColumn":13},{"ruleId":"173","severity":1,"message":"183","line":14,"column":5,"nodeType":"175","messageId":"176","endLine":14,"endColumn":11},{"ruleId":"173","severity":1,"message":"184","line":15,"column":5,"nodeType":"175","messageId":"176","endLine":15,"endColumn":13},{"ruleId":"173","severity":1,"message":"185","line":18,"column":8,"nodeType":"175","messageId":"176","endLine":18,"endColumn":23},{"ruleId":"173","severity":1,"message":"186","line":19,"column":8,"nodeType":"175","messageId":"176","endLine":19,"endColumn":18},{"ruleId":"173","severity":1,"message":"182","line":13,"column":5,"nodeType":"175","messageId":"176","endLine":13,"endColumn":13},{"ruleId":"173","severity":1,"message":"183","line":14,"column":5,"nodeType":"175","messageId":"176","endLine":14,"endColumn":11},{"ruleId":"173","severity":1,"message":"184","line":15,"column":5,"nodeType":"175","messageId":"176","endLine":15,"endColumn":13},{"ruleId":"173","severity":1,"message":"181","line":11,"column":5,"nodeType":"175","messageId":"176","endLine":11,"endColumn":11},{"ruleId":"173","severity":1,"message":"182","line":13,"column":5,"nodeType":"175","messageId":"176","endLine":13,"endColumn":13},{"ruleId":"173","severity":1,"message":"183","line":14,"column":5,"nodeType":"175","messageId":"176","endLine":14,"endColumn":11},{"ruleId":"173","severity":1,"message":"184","line":15,"column":5,"nodeType":"175","messageId":"176","endLine":15,"endColumn":13},{"ruleId":"173","severity":1,"message":"185","line":18,"column":8,"nodeType":"175","messageId":"176","endLine":18,"endColumn":23},{"ruleId":"173","severity":1,"message":"186","line":19,"column":8,"nodeType":"175","messageId":"176","endLine":19,"endColumn":18},{"ruleId":"173","severity":1,"message":"181","line":11,"column":5,"nodeType":"175","messageId":"176","endLine":11,"endColumn":11},{"ruleId":"173","severity":1,"message":"182","line":13,"column":5,"nodeType":"175","messageId":"176","endLine":13,"endColumn":13},{"ruleId":"173","severity":1,"message":"183","line":14,"column":5,"nodeType":"175","messageId":"176","endLine":14,"endColumn":11},{"ruleId":"173","severity":1,"message":"184","line":15,"column":5,"nodeType":"175","messageId":"176","endLine":15,"endColumn":13},{"ruleId":"173","severity":1,"message":"185","line":18,"column":8,"nodeType":"175","messageId":"176","endLine":18,"endColumn":23},{"ruleId":"173","severity":1,"message":"186","line":19,"column":8,"nodeType":"175","messageId":"176","endLine":19,"endColumn":18},{"ruleId":"173","severity":1,"message":"182","line":13,"column":5,"nodeType":"175","messageId":"176","endLine":13,"endColumn":13},{"ruleId":"173","severity":1,"message":"184","line":15,"column":5,"nodeType":"175","messageId":"176","endLine":15,"endColumn":13},{"ruleId":"173","severity":1,"message":"185","line":18,"column":8,"nodeType":"175","messageId":"176","endLine":18,"endColumn":23},{"ruleId":"173","severity":1,"message":"186","line":19,"column":8,"nodeType":"175","messageId":"176","endLine":19,"endColumn":18},{"ruleId":"173","severity":1,"message":"181","line":11,"column":5,"nodeType":"175","messageId":"176","endLine":11,"endColumn":11},{"ruleId":"173","severity":1,"message":"182","line":13,"column":5,"nodeType":"175","messageId":"176","endLine":13,"endColumn":13},{"ruleId":"173","severity":1,"message":"183","line":14,"column":5,"nodeType":"175","messageId":"176","endLine":14,"endColumn":11},{"ruleId":"173","severity":1,"message":"184","line":15,"column":5,"nodeType":"175","messageId":"176","endLine":15,"endColumn":13},{"ruleId":"173","severity":1,"message":"185","line":18,"column":8,"nodeType":"175","messageId":"176","endLine":18,"endColumn":23},{"ruleId":"173","severity":1,"message":"186","line":19,"column":8,"nodeType":"175","messageId":"176","endLine":19,"endColumn":18},{"ruleId":"173","severity":1,"message":"187","line":100,"column":12,"nodeType":"175","messageId":"176","endLine":100,"endColumn":23},{"ruleId":"173","severity":1,"message":"188","line":100,"column":25,"nodeType":"175","messageId":"176","endLine":100,"endColumn":39},{"ruleId":"173","severity":1,"message":"187","line":99,"column":12,"nodeType":"175","messageId":"176","endLine":99,"endColumn":23},{"ruleId":"173","severity":1,"message":"188","line":99,"column":25,"nodeType":"175","messageId":"176","endLine":99,"endColumn":39},{"ruleId":"189","severity":1,"message":"190","line":43,"column":12,"nodeType":"191","endLine":43,"endColumn":14,"suggestions":"192"},{"ruleId":"189","severity":1,"message":"193","line":56,"column":8,"nodeType":"191","endLine":56,"endColumn":10,"suggestions":"194"},{"ruleId":"189","severity":1,"message":"195","line":40,"column":8,"nodeType":"191","endLine":40,"endColumn":10,"suggestions":"196"},"no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","'MenuIcon' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'url' is assigned a value but never used.","'Button' is defined but never used.","'Snackbar' is defined but never used.","'Dialog' is defined but never used.","'Backdrop' is defined but never used.","'CheckCircleIcon' is defined but never used.","'CancelIcon' is defined but never used.","'description' is assigned a value but never used.","'setDescription' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.selectedLeave.description', 'props.selectedLeave.endDate', and 'props.selectedLeave.startDate'. Either include them or remove the dependency array. If 'setSelectedStartDate' needs the current value of 'props.selectedLeave.startDate', you can also switch to useReducer instead of useState and read 'props.selectedLeave.startDate' in the reducer.","ArrayExpression",["197"],"React Hook useEffect has missing dependencies: 'props.selectedEmployee.address', 'props.selectedEmployee.age', 'props.selectedEmployee.contactNumber', 'props.selectedEmployee.dateOfBirth', 'props.selectedEmployee.designation', 'props.selectedEmployee.email', 'props.selectedEmployee.gender', and 'props.selectedEmployee.name'. Either include them or remove the dependency array. If 'setName' needs the current value of 'props.selectedEmployee.name', you can also switch to useReducer instead of useState and read 'props.selectedEmployee.name' in the reducer.",["198"],"React Hook useEffect has missing dependencies: 'props.employee.id' and 'props.employee.name'. Either include them or remove the dependency array. If 'setEmployeeId' needs the current value of 'props.employee.id', you can also switch to useReducer instead of useState and read 'props.employee.id' in the reducer.",["199"],{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [props.selectedLeave.description, props.selectedLeave.endDate, props.selectedLeave.startDate]",{"range":"206","text":"207"},"Update the dependencies array to be: [props.selectedEmployee.address, props.selectedEmployee.age, props.selectedEmployee.contactNumber, props.selectedEmployee.dateOfBirth, props.selectedEmployee.designation, props.selectedEmployee.email, props.selectedEmployee.gender, props.selectedEmployee.name]",{"range":"208","text":"209"},"Update the dependencies array to be: [props.employee.id, props.employee.name]",{"range":"210","text":"211"},[1325,1327],"[props.selectedLeave.description, props.selectedLeave.endDate, props.selectedLeave.startDate]",[1901,1903],"[props.selectedEmployee.address, props.selectedEmployee.age, props.selectedEmployee.contactNumber, props.selectedEmployee.dateOfBirth, props.selectedEmployee.designation, props.selectedEmployee.email, props.selectedEmployee.gender, props.selectedEmployee.name]",[1052,1054],"[props.employee.id, props.employee.name]"]